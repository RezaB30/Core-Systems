@using RezaB.Web.Helpers
@using System.Globalization

@model IEnumerable<RadiusR_Manager.Models.ViewModels.PDFTemplates.PDFItemPlacementViewModel>

@{
    ViewBag.Title = RadiusR.Localization.Pages.Common.EditTemplate + "-" + ViewBag.TemplateName;
    var hasBackground = (bool)ViewBag.HasBackground;
}

<div class="centered-form-wrapper">
    <div class="centered-form">
        <div>
            @using (Html.BeginForm("ChangeTemplateBackground", null, FormMethod.Post, new { @enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()
                @Html.Hidden("id", Request.QueryString["id"])
                @Html.FileUpload("background", "image/*")
                <input type="submit" value="@RadiusR.Localization.Pages.Common.Save" class="link-button iconed-button save-button" />
            }
            @if (hasBackground)
            {
                <div style="text-align: right;">
                    @using (Html.BeginForm("RemoveTemplateBackground", null, FormMethod.Post, new { @confirm = "enabled" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.Hidden("id", Request.QueryString["id"])
                        <input type="submit" value="@RadiusR.Localization.Pages.Common.Remove" class="link-button iconed-button delete-button" />
                    }
                </div>
            }
        </div>
        @if (hasBackground)
        {
            using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
    <div class="pdf-template-background-container">
        <img class="pdf-template-background" src='@Url.Action("GetPDFBackground", new { id = Request.RequestContext.RouteData.Values["id"] })' style="max-width: 1024px;" />
        @Html.Partial("_PDFEditContextMenu")
        <!--Loaded Items-->
        @foreach (var item in Model)
        {
            <span class="pdf-template-item-view" item-id="@item.ID" content-position-x="@item.Placement.X" content-position-y="@item.Placement.Y">@item.Name</span>
        }
        <!--Loaded Items-->
    </div>
                <div class="hidden-fields-container"></div>
                <div class="centered">
                    @Html.ActionLink(RadiusR.Localization.Pages.Common.Back, "Index", null, new { @class = "link-button iconed-button back-button" })
                    <input id="pdf-template-reset-button" type="button" value="@RadiusR.Localization.Pages.Common.Reset" class="link-button iconed-button clear-button" />
                    <input id="pdf-template-save-button" type="button" value="@RadiusR.Localization.Pages.Common.Save" class="link-button iconed-button save-button" />
                </div>
            }
        }
    </div>
</div>

@section PageScripts{
    <script>
        var contextPosition = null;
        var contextMenu = $('div#context-menu-root');
        var templateBoard = $('div.pdf-template-background-container');
        var pdfSaveButton = $('#pdf-template-save-button');
        var pdfResetButton = $('#pdf-template-reset-button');
        var templateSaveForm = pdfSaveButton.closest('form');
        var modelName = '@Html.NameForModel()';
        // template background context menu
        templateBoard.bind('contextmenu', function (e) {
            e.preventDefault();
            contextPosition = {
                x: e.offsetX,
                y: e.offsetY
            };

            contextMenu.css({ top: contextPosition.y + 'px', left: contextPosition.x + 'px' });
            contextMenu.addClass('open');
        });
        // context menu closure
        $(document).click(function (e) {
            contextMenu.removeClass('open');
        });
        // context menu items click event
        contextMenu.find('div.pdf-context-menu-item:not(.root-item)').click(function (e) {
            var currentItem = $(this);
            var currentText = currentItem.children('span').first().text();
            var currentId = currentItem.attr('content-id');
            //var currentName = currentItem.attr('content-name');
            //// remove previous same label
            //templateBoard.find('span#' + currentId).remove();
            // add new label
            templateBoard.append('<span item-id="' + currentId + '" class="pdf-template-item-view">' + currentText + '</span>');
            var addedLabel = templateBoard.find('span.pdf-template-item-view').last();
            addedLabel.css({ top: contextPosition.y + 'px', left: contextPosition.x + 'px' });
            // context menu removal for labels
            addedLabel.bind('contextmenu', function (e) {
                e.preventDefault();
                e.stopPropagation();
            });
            // label removal
            addedLabel.click(function (e) {
                addedLabel.remove();
            });
        });
        // save action
        pdfSaveButton.click(function (e) {
            var validItems = templateSaveForm.find('span.pdf-template-item-view');
            var hiddenContainer = templateSaveForm.find('div.hidden-fields-container');
            validItems.each(function (index) {
                var currentItem = $(this);
                var itemName = modelName + '[' + index + ']';
                var itemId = currentItem.attr('item-id');
                var itemCoords = { top: currentItem.position().top / parseFloat(templateBoard.height()), left: currentItem.position().left / parseFloat(templateBoard.width()) };
                var newInputs = "<input type='hidden' name='" + itemName + ".ID' value='" + itemId + "' /><input type='hidden' name='" + itemName + ".Placement.X' value='" + itemCoords.left + "' /><input type='hidden' name='" + itemName + ".Placement.Y' value='" + itemCoords.top + "' />";
                hiddenContainer.append(newInputs);
            });

            templateSaveForm.submit();
        });
        // reset button action
        pdfResetButton.click(function () {
            templateBoard.find('span.pdf-template-item-view').remove();
        });
        // load placements
        templateBoard.find('img.pdf-template-background').bind('load', function () {
            templateBoard.find('span.pdf-template-item-view').each(function () {
                var current = $(this);
                var currentPosition = { left: Math.round(templateBoard.width() * parseFloat(current.attr('content-position-x'))), top: Math.round(templateBoard.height() * parseFloat(current.attr('content-position-y'))) };
                current.css({ left: currentPosition.left + 'px', top: currentPosition.top + 'px' });
                current.click(function (e) {
                    current.remove();
                });
            });
        });
    </script>
}